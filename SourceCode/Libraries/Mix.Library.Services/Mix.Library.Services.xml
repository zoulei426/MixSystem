<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mix.Library.Services</name>
    </assembly>
    <members>
        <member name="T:Mix.Library.Services.CompanyService">
            <summary>
            CompanyService
            </summary>
            <seealso cref="T:Mix.Data.Services.ApplicationService" />
            <seealso cref="T:Mix.Library.Services.ICompanyService" />
        </member>
        <member name="M:Mix.Library.Services.CompanyService.#ctor(Mix.Library.Repositories.ICompanyRepository,Mix.Library.Repositories.IEmployeeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Mix.Library.Services.CompanyService"/> class.
            </summary>
            <param name="companyRepository">The company repository.</param>
            <param name="employeeRepository">The employee repository.</param>
        </member>
        <member name="M:Mix.Library.Services.CompanyService.GetCompaniesAsync(Mix.Library.Entities.DtoParameters.CompanyDtoParameters)">
            <summary>
            Gets the companies asynchronous.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mix.Library.Services.CompanyService.CreateCompanyAsync(Mix.Library.Entities.Dtos.CompanyAddDto)">
            <summary>
            Creates the company asynchronous.
            </summary>
            <param name="company">The company.</param>
            <returns></returns>
        </member>
        <member name="M:Mix.Library.Services.CompanyService.CreateCompanyCollectionAsync(System.Collections.Generic.IEnumerable{Mix.Library.Entities.Dtos.CompanyAddDto})">
            <summary>
            Creates the company collection asynchronous.
            </summary>
            <param name="companieCollection">The companie collection.</param>
            <returns></returns>
        </member>
        <member name="T:Mix.Library.Services.EmployeeService">
            <summary>
            EmployeeService
            </summary>
            <seealso cref="T:Mix.Library.Services.IEmployeeService" />
        </member>
        <member name="M:Mix.Library.Services.EmployeeService.#ctor(Mix.Library.Repositories.ICompanyRepository,Mix.Library.Repositories.IEmployeeRepository,Mix.Core.Mapping.IPropertyMappingService)">
            <summary>
            Initializes a new instance of the <see cref="T:Mix.Library.Services.EmployeeService"/> class.
            </summary>
            <param name="companyRepository">The company repository.</param>
            <param name="employeeRepository">The employee repository.</param>
            <param name="propertyMappingService"></param>
        </member>
        <member name="M:Mix.Library.Services.EmployeeService.GetEmployeesForCompany(System.Guid,Mix.Library.Entities.DtoParameters.EmployeeDtoParameters)">
            <summary>
            Gets the employees for company.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Mix.Library.Services.ICompanyService">
            <summary>
            ICompanyService
            </summary>
        </member>
        <member name="M:Mix.Library.Services.ICompanyService.GetCompaniesAsync(Mix.Library.Entities.DtoParameters.CompanyDtoParameters)">
            <summary>
            Gets the companies asynchronous.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mix.Library.Services.ICompanyService.CreateCompanyAsync(Mix.Library.Entities.Dtos.CompanyAddDto)">
            <summary>
            Creates the company asynchronous.
            </summary>
            <param name="company">The company.</param>
            <returns></returns>
        </member>
        <member name="M:Mix.Library.Services.ICompanyService.CreateCompanyCollectionAsync(System.Collections.Generic.IEnumerable{Mix.Library.Entities.Dtos.CompanyAddDto})">
            <summary>
            Creates the company collection asynchronous.
            </summary>
            <param name="companieCollection">The companie collection.</param>
            <returns></returns>
        </member>
        <member name="T:Mix.Library.Services.IEmployeeService">
            <summary>
            IEmployeeService
            </summary>
        </member>
        <member name="M:Mix.Library.Services.IEmployeeService.GetEmployeesForCompany(System.Guid,Mix.Library.Entities.DtoParameters.EmployeeDtoParameters)">
            <summary>
            Gets the employees for company.
            </summary>
            <param name="companyId">The company identifier.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Mix.Library.Services.PropertyMappingService">
            <summary>
            属性映射服务
            </summary>
        </member>
        <member name="M:Mix.Library.Services.PropertyMappingService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mix.Library.Services.PropertyMappingService"/> class.
            </summary>
        </member>
        <member name="M:Mix.Library.Services.PropertyMappingService.GetPropertyMapping``2">
            <summary>
            Gets the property mapping.
            </summary>
            <typeparam name="TSouce">The type of the souce.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <returns></returns>
            <exception cref="T:System.Exception">无法找到唯一的映射关系：{typeof(TSouce)}，{typeof(TDestination)}</exception>
        </member>
    </members>
</doc>
